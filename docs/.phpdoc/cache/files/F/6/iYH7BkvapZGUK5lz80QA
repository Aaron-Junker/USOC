1671916366
waR3U4bTeM%3Ad7e0b8e1d33b7653004b7dc22b383f4c-49cf097a32208e01fe042f250201ad2d
s:5836:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjQ5Y2YwOTdhMzIyMDhlMDFmZTA0MmYyNTAyMDFhZDJkIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6ODoidGVzdC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czoyMDoiYWRtaW4vcGFnZXMvdGVzdC5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjM1OTE6IjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZW4iPg0KICAgIDxoZWFkPg0KICAgICAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+DQogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+DQogICAgICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4NCiAgICAgICAgPHRpdGxlPkRvY3VtZW50PC90aXRsZT4NCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5tZXRyb3VpLm9yZy51YS92NC9jc3MvbWV0cm8tYWxsLm1pbi5jc3MiPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4ubWV0cm91aS5vcmcudWEvdjQvanMvbWV0cm8ubWluLmpzIj48L3NjcmlwdD4NCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIuLi9pbWFnZXMvaWNvZm9udC9pY29mb250Lm1pbi5jc3MiIC8+DQogICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICBmdW5jdGlvbiBzaG93X2FsZXJ0KCkgew0KICAgICAgICAgICAgICAgIGFsZXJ0KCJIZWxsbyB3b3JsZCEiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgPC9zY3JpcHQ+DQogICAgPC9oZWFkPg0KICAgIDxib2R5IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW4iPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtYWlud2luZG93IiANCiAgICAgICAgZGF0YS10aXRsZT0iQWRtaW4gYXJlYSINCiAgICAgICAgZGF0YS1idG4tY2xvc2U9ImZhbHNlIg0KICAgICAgICBkYXRhLWJ0bi1taW49ImZhbHNlIg0KICAgICAgICBkYXRhLWJ0bi1tYXg9ImZhbHNlIg0KICAgICAgICBkYXRhLWljb249IjxpIGNsYXNzPScgaWNvZm9udC1zZXR0aW5ncyc+PC9pPiINCiAgICAgICAgZGF0YS1yb2xlPSJ3aW5kb3ciDQogICAgICAgIGRhdGEtZHJhZ2dhYmxlPSJmYWxzZSINCiAgICAgICAgZGF0YS13aWR0aD0iMTAwJSINCiAgICAgICAgZGF0YS1oZWlnaHQ9IjEwMCUiDQogICAgICAgIGRhdGEtcmVzaXphYmxlPSJmYWxzZSI+DQogICAgICAgICAgICA8bmF2IGRhdGEtcm9sZT0icmliYm9ubWVudSI+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWJzLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3RhdGljIGRpc2FibGVkIj48YSBocmVmPSIjIj5PcHRpb25zPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjc2VjdGlvbi1zdGFydCI+U3RhcnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiNzZWN0aW9uLWZpbGUiPkZpbGU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiNzZWN0aW9uLWFkZCI+QWRkL0VkaXQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uIiBpZD0ic2VjdGlvbi1zdGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icmliYm9uLWJ1dHRvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvZm9udC1zZXR0aW5ncyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FwdGlvbiI+U2hhcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJyaWJib24tYnV0dG9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29mb250LXNldHRpbmdzIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXB0aW9uIj5TaGFyZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+R3JvdXAgdGl0bGU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JvdXAiIHN0eWxlPSJmbG9hdDpyaWdodCFpbXBvcnRhbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InJpYmJvbi1idXR0b24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb2ZvbnQtbG9nb3V0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXB0aW9uIj5Mb2dvdXQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkdyb3VwIHRpdGxlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uIiBpZD0ic2VjdGlvbi1maWxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwLTQiPlNlY3Rpb24gdHdvPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbiIgaWQ9InNlY3Rpb24tYWRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwLTQiPlNlY3Rpb24gdGhyZWU8L3A+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3aW5kb3ctY29udGVudCI+DQogICAgICAgICAgICA8cD50ZXN0PC9wPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0idGVzdHdpbmRvdyIgDQogICAgICAgICAgICBkYXRhLXRpdGxlPSJBZG1pbiBhcmVhIg0KICAgICAgICAgICAgZGF0YS1pY29uPSI8aSBjbGFzcz0naWNvZm9udC1zZXR0aW5ncyc+PC9pPiINCiAgICAgICAgICAgIGRhdGEtcm9sZT0id2luZG93Ig0KICAgICAgICAgICAgZGF0YS10b3A9IjEwMDBweCI+DQogICAgICAgICAgICAgICAgPHA+SGVsbG8gd29ybGQhPC9wPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgPC9ib2R5Pg0KPC9odG1sPiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";